1.查看标签：git tag [-n -l]
  
  a.显示当前版本库所有的标签：git tag [-n[<num>]]
    i.无选项则会一行行列出所有的标签名
    ii.-n会显示每个标签的说明
    iii.-n后伴随的（可以省略）的<num>数字表示最多只显示标签说明多少行（有些标签的说明可能很长，因此需要限制显示行数）
    iv.示例：
git tag
git tag -n2    #显示标签说明，并最多每个说明显示2行

  b.使用通配符过滤要查看的标签：git tag -l str_reg
    i.-l表示可以使用通配符过滤要查看的标签
    ii.例如：git tag -l jx/v2*
    iii.一般配合-n，例如：git tag -n1 -l jx/v2*

  c.git log --decorate可以查看历史提交所对应的标签（如果有标签的话）


2.查看当前版本和最近标签之间的距离：git describe

  a.使用方法：git describe [<commit>]
    i.显示结果是<最近一次标签>-<和最近一次标签的距离>-g<commitID的简化版>
    ii.例如显示03fc这次提交距离最近一次标签的距离：git describe 03fc   #结果为v2.1-3-g923eff8
    iii.省略<commit>默认为当前HEAD

  b.使用该命令的前提是当前版本库中至少有一个标签，否则就没有参照可言，因此也没有距离一说（会直接报错的！）：
    i.使用--always参数：git describe --always [<commit>]
    ii.该参数表示，如果当前版本库如果连一个标签都还没有就只显示<commit>的简化ID吧，至少不会报错！如果有标签则正常显示距离

  a.打标签的同时做出说明：git tag -m str_comment 标签名

  b.查看当前版本与最近一次标签的距离：git describe


3.创建轻量级标签：
  
  a.创建方法：git tag str_tag_name [<commit>]

  b.轻量级标签的缺点：
    i.可以从创建方式上看出非常简单
    ii.轻量级标签没有标签说明，更不知道创建信息（谁创建、何时创建）
    iii.这在团队协同开发时非常不好
    iv.git describe忽略轻量级标签（如果有其它非轻量级标签则用它们显示距离，否则直接报错！）


4.创建带说明的标签：

  a.直接在命令行输入标签说明：git tag -m <comment> <tagname> [<commit>]
*.示例：git tag -m "a annotated tag" v1.23 0e4f9b

  b.如果说明太长则可以进入编辑器慢慢写：git tag -a <tagname> [<commit>]
    i.会自动打开vi编辑标签说明
    ii.保存退出后创建完成标签

  c.说明标签和轻量级标签的区别：
    i.轻量级标签在版本库中其实就是一个普通的commit对象，而说明标签是一个正式的tag对象
    ii.可以在tag对象的属性中查看打标签的人以及打标签的时间，包括标签说明
    iii.比轻量级标签安全性更好


5.删除标签：git tag -d
  
  a.标签和普通提交对象最大的区别就是标签的各种操作不会记录在reflog里！

  b.删除某个标签：git tag -d <tagname>
*.结果会显示被删除的标签所对应的提交ID

  c.由于标签操作不记录在reflog里，因此一旦误删边很难恢复，误删后必须立马记住上一次删除输出的提交ID并重新创建恢复标签！

  d.不要轻易对标签改名：
    i.Git没有提供对标签的改名机制，因为在底层，各种对象直接都会引用tag，一旦改名联动性太大，会使版本库混乱
    ii.唯一可以做到安全改名的就是先删除该标签，然后再重新创建该标签（改名）


6.和远程共享标签：

  a.向远程推送标签：
    i.单单一个git push无法将本地标签推送到远程的！
*.因为Git为了避免各种本地往上游推送标签，结果导致上游标签混乱的情况（同名标签推送会相互覆盖！）
    ii.所以标签推送一定要慎重，因此只允许在本地知情的情况下显式推送：git push origin <tagname>
    iii.显示推送所有本地标签：git push origin refs/tags/*

  b.拉回标签：普通的拉回操作git pull就可以直接获取远程版本库中所有新创建的标签

  c.远程标签的更新无法自动拉回：
    i.如果有人强制改动了远程版本库中的某个标签（标签执行、说明等的改变），并且之前本地已经拉回过一次该标签了
    ii.那么在此git pull拉回并不能更新该标签
    iii.这是因为Git为了避免上游泛滥的修改标签导致下游标签混乱
    iv.同样，如果想强制更新，则必须是在本地知情的情况下显示拉回：git pull origin refs:tags/<tagname>:refs/tags/<tagname>
*.上式冒号左边表示远程的标签，覆盖冒号右边的本地标签


7.删除远程标签：git push origin :<tagname>

  a.如果发现刚刚推送到远程的标签不合适，则可以直接在本地执行命令删除刚刚推送到远程的标签

  b.命令：git push <remote_url>  :<tagname>
    i.最后一项其实是一个引用表达式，即A:B，这里只不过A是空
    ii.上面命令的意思是将空推送给远程的<tagname>标签，相当于用空来覆盖远程标签，从而完成删除！
    iii.示例：git push origin :v1.0
    iv.该方法不仅可以删除标签，也可以删除其他远程版本库中的对象，例如分支等


8.标签命名规范：

  a.不要包含空格、~、^、:、?、*、[]、/、\这几个特殊字符

  b.不要以-开头，以.结尾

  c.不能出现连续两个或两个以上的.

  d.不能以.lock结尾

  d.不能包含@{字符串


9.建议命名规则：

  a.<项目名>-v<大版本号>.<功能版本号>.<模块版本号>.<修正号>-r<预发布号>

  b.大版本号：整个项目构架、需求等的更新

  c.功能版本号：项目中功能的添加和更新

  d.模块版本号：某几项功能增加和更新其中的模块

  e.修正号：正处于bugfix的版本

  f.预发布号：在正式稳定版发布之前预发布的次数，每预发布一次就是一次β公测

  h.示例：
metapho-v3.12.7       #正式稳定版
metapho-v2.9.13.5     #正处于bugfix
metapho-v3.5.13-r13   #正式版本的第13次公测版本