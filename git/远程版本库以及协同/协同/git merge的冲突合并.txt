1.合并以及冲突解决：git merge（以及git pull之后发生的merge冲突）

  a.git的merge非常智能，对于以下情况都可以实现自动合并，无需人工打开文件对比修改后实现无冲突合并：
    i.不同文件中的修改
    ii.同一文件中的不同位置的修改
    iii.文件移动（其实就是重命名）、文件添加、文件删除等

  b.无法自动合并的冲突：会直接报错，拒绝合并，要求用户自己决定如何修改后再合并
    i.同体冲突：同一文件的相同地方的修改（这是显然的，也是最容易想到的）
    ii.树冲突：目录中同一个结点在两个版本中错位，一个版本的某个目录移动到另一个位置，这样的话两个版本的该目录就在不同位置了，那么合并时应该合并到什么位置呢？肯定没有什么中间位置的，这种冲突也需要用户自己定夺了
*.如果合并成功会自动提交一个新的合并后的版本，当然你也可以不提交，只要加--no-commit选项就行：git merge --no-commit 提交列表
*.之后再自己仔细检查stage中内容确定后再commit，这样更加严谨
    
  c.同体冲突解决：
    i.首先不管合并失败还是成功，该命令都会将已经成功完成合并的文件放入stage中，如果最终合并成功会提交并刷新stage
    ii.如果没有合并成功，那除了冲突文件，其余合并成功的文件仍然已保存在stage中了，只会把没有解决冲突的文件放在工作区中
    iii.只不过合并失败不会提交合并而已
    iv.如果合并失败，会在失败信息中显示出那些没有解决冲突的文件，git会将这些文件做一些特殊标记放在工作区中待用户自己解决冲突
    v.这些文件会用<<<<<<========>>>>>>符号标记出无法解决冲突的部分让用户自行修改，用户修改完成之后再git add、git commit便能完成最后的合并

  d.树冲突解决：
    i.说白了就是文件重命名冲突，当两个版本都对同一个文件重命名后，合并时git必然不能替你做出决定
    ii.一旦发生了树冲突双方就必须要讨论如何解决冲突以及合并
    iii.一般两个人的商量结果无非就是两种情况：
      *1.最简单的情况，取其一，删除其中一个留下另一个，这样的合并可以直接通过git命令快速解决
      *2.最麻烦的情况，需要两者取中和，可能会是两者的命名加起来的结果，这就需要手动改文件之后合并了
    iv.树冲突合并失败后（git pull & git merge）必然会出现这样的情况：A的重命名文件和B的重名文件同时出现在工作区和stage，同时两者命名之前的文件出现在stage中，也就是说stage会出现三个
    v.如果解决的方法仅仅是两者取其一，那么只要将舍弃的和重名之前的文件git rm掉，把要留下的那个文件git add掉，最后commit掉就完成合并了，之后push即可
*.这种手工的方法不仅仅可以解决树冲突，而且可以解决同时发生内容修改冲突的树冲突
    vi.同样，仅仅是两者取其一也可以使用命令行工具，git mergetool，发生冲突后直接输入命令git mergetool之后，会列出所有冲突的文件，然后根据提示逐一选择如何处理即可，非常无脑
   
  e.无法依靠git解决的冲突――逻辑冲突：即逻辑bug
    i.上述的所有情形即使是无法解决的冲突git也会提示你解决
    ii.但是某些逻辑上的冲突确实没法按照上面套路解决的，比如头文件问题，一个人改了头文件的名称推送，另一个人改了实现文件合并，没有问题，因为改动的是不同文件
    iii.但是头文件名改动后，所有引用它的实现文件中头文件名也需要该，虽然git不会报冲突，但是你工程编译的时候就会报错，而这里问题git没法解决，只能由项目经理特别注意，制定好机制来避免！
*.冲突解决后别忘了commit，提交之后就可以push了
