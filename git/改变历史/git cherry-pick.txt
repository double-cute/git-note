1.其实就是一个点合并：git cherry-pick

  a.用法：git cherry-pick 提交ID或引用

  b.其本质就是用指定个提交跟当前HEAD（现场）进行合并，发生冲突时和git merge的解决方法完全一样

  c.这看上去好像和git merge没区别嘛！但其实是由本质区别的：
    i.merge的对象是两个分支，merge后两个分支都发生改变（即合并了）
    ii.但是cherry-pick合并的是两个点，其合并的结果并不改变分拣的那个点所在的分支，只是让当前HEAD前进一步而已
    iii.并且用git log根本看不到分拣点的任何痕迹，分拣点被合并进去的踪迹根本没有（除非用git reflog查看）
  
  d.cherry-pick命令会执行一次提交，提交的说明就是分拣点所代表的那个提交的说明，本质是合并，但表面上其实是“将分拣提交应用到当前HEAD上”
*.其本质就是将分检点暂时复制出一份临时副本，然后和当前HEAD合并提交，合并后将该临时副本删除，因此合并后的提交ID必然和分拣点ID不同！

  e.具体图示请看cherry-pick.png

  f.之所以叫做cherry-pick（分拣），是因为该命令分拣的是已经存在的提交，并且合并后的新提交的说明也和分拣的说明一样！
*.因此在含义上理解为从众多已存在的提交中分拣出一个“应用”到（合并到）当前HEAD

  g.示例：
git cherry-pick HEAD^
git cherry-pick 09c1
git cherry-pick branch^^
...